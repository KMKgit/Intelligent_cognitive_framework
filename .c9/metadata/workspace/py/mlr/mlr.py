{"filter":false,"title":"mlr.py","tooltip":"/py/mlr/mlr.py","ace":{"folds":[],"scrolltop":322,"scrollleft":0,"selection":{"start":{"row":36,"column":25},"end":{"row":36,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":22,"state":"start","mode":"ace/mode/python"}},"hash":"5546353f282b4ec159b14abf7305a5b59c2f5808","undoManager":{"mark":6,"position":6,"stack":[[{"start":{"row":31,"column":4},"end":{"row":52,"column":6},"action":"remove","lines":["","    def pre_processing_for_data(self, data_file_path):","        data_pd = pd.read_csv(data_file_path)","        features_pd = data_pd","        if self.label_name in features_pd:","            features_pd = features_pd.drop(self.label_name,1)","        self.data_dim = len(features_pd.columns)","        self.samples = len(features_pd)","        X_val = np.array(features_pd)","        ","        if self.label_name is not None:","            if self.label_name in data_pd:","                label_pd = data_pd[self.label_name]","                label_list = list(set(np.reshape(label_pd.values,(-1,))))","                Y_val = np.array(label_pd)","            else:","                Y_val = 0","        else:","            Y_val = 0","            ","        return X_val, Y_val","      "],"id":21},{"start":{"row":31,"column":4},"end":{"row":73,"column":6},"action":"insert","lines":["","    def pre_processing_for_data(self, data_file_path):","      ","        #read data","        data_pd = pd.read_csv(data_file_path)","        #assign features ","        features_pd = data_pd","        #features_pd = features_pd.drop('label',1)","       ","        if self.label_name in features_pd:","            features_pd = features_pd.drop(self.label_name,1)","        ","        self.data_dim = len(features_pd.columns)","        self.samples = len(features_pd)","        #crate input data","        X_val = np.array(features_pd)","        #adjust_offset_value = len(X_val)-(len(X_val) % self.timesteps)","        #X_val = X_val[0:adjust_offset_value]","        #X_val = X_val.reshape(-1, self.timesteps, self.data_dim)","        #assign label","        #label_pd = data_pd['label']","        if self.label_name is not None:","            if self.label_name in data_pd:","                label_pd = data_pd[self.label_name]","                #calculate label list","                label_list = list(set(np.reshape(label_pd.values,(-1,))))","                #create output data","                #Y_val = []","                #loop for number of data","                #for count, i  in enumerate(label_pd):","                #    idx = find_matching_index(label_list,i)","                #    Y_val.append(np.reshape(vectorized_Y_data(idx,len(label_list)),(-1,)))","                Y_val = np.array(label_pd)","                #Y_val = to_categorical(Y_val)","            else:","                Y_val = 0","        else:","            Y_val = 0","      ","        #print(np.shape(X_val))","        #print(np.shape(Y_val))","        return X_val, Y_val","      "]}],[{"start":{"row":69,"column":6},"end":{"row":71,"column":31},"action":"remove","lines":["","        #print(np.shape(X_val))","        #print(np.shape(Y_val))"],"id":22}],[{"start":{"row":63,"column":42},"end":{"row":64,"column":46},"action":"remove","lines":["","                #Y_val = to_categorical(Y_val)"],"id":23}],[{"start":{"row":56,"column":73},"end":{"row":62,"column":91},"action":"remove","lines":["","                #create output data","                #Y_val = []","                #loop for number of data","                #for count, i  in enumerate(label_pd):","                #    idx = find_matching_index(label_list,i)","                #    Y_val.append(np.reshape(vectorized_Y_data(idx,len(label_list)),(-1,)))"],"id":24}],[{"start":{"row":46,"column":37},"end":{"row":50,"column":21},"action":"remove","lines":["","        #adjust_offset_value = len(X_val)-(len(X_val) % self.timesteps)","        #X_val = X_val[0:adjust_offset_value]","        #X_val = X_val.reshape(-1, self.timesteps, self.data_dim)","        #assign label"],"id":25}],[{"start":{"row":46,"column":37},"end":{"row":47,"column":36},"action":"remove","lines":["","        #label_pd = data_pd['label']"],"id":26}],[{"start":{"row":37,"column":29},"end":{"row":38,"column":50},"action":"remove","lines":["","        #features_pd = features_pd.drop('label',1)"],"id":27}]]},"timestamp":1485873630577}